#!/usr/bin/env python3
"""
Script de diagn√≥stico para verificar c√°maras y permisos en macOS.
"""

import cv2
import sys
import subprocess
import platform

def check_system_info():
    """Verificar informaci√≥n del sistema."""
    print("=== INFORMACI√ìN DEL SISTEMA ===")
    print(f"Sistema operativo: {platform.system()}")
    print(f"Versi√≥n: {platform.release()}")
    print(f"Arquitectura: {platform.machine()}")
    print(f"Python: {sys.version}")
    print(f"OpenCV: {cv2.__version__}")
    print()

def check_camera_permissions():
    """Verificar permisos de c√°mara en macOS."""
    if platform.system() != "Darwin":
        print("Este diagn√≥stico es espec√≠fico para macOS")
        return
    
    print("=== VERIFICACI√ìN DE PERMISOS DE C√ÅMARA ===")
    
    try:
        # Verificar c√°maras del sistema
        result = subprocess.run(['system_profiler', 'SPCameraDataType'], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print("C√°maras detectadas por el sistema:")
            print(result.stdout)
        else:
            print("No se pudo obtener informaci√≥n de c√°maras del sistema")
    
    except Exception as e:
        print(f"Error al verificar c√°maras del sistema: {e}")
    
    print()

def test_camera_access():
    """Probar acceso directo a las c√°maras."""
    print("=== PRUEBA DE ACCESO A C√ÅMARAS ===")
    
    successful_cameras = []
    
    for camera_index in range(5):
        print(f"Probando c√°mara {camera_index}...")
        
        try:
            cap = cv2.VideoCapture(camera_index)
            
            if cap.isOpened():
                print(f"  ‚úì C√°mara {camera_index} se puede abrir")
                
                # Intentar capturar un frame
                ret, frame = cap.read()
                
                if ret and frame is not None:
                    height, width = frame.shape[:2]
                    print(f"  ‚úì Frame capturado: {width}x{height}")
                    successful_cameras.append(camera_index)
                else:
                    print(f"  ‚úó No se puede capturar frame de c√°mara {camera_index}")
                
                cap.release()
            else:
                print(f"  ‚úó No se puede abrir c√°mara {camera_index}")
        
        except Exception as e:
            print(f"  ‚úó Error con c√°mara {camera_index}: {e}")
    
    print()
    print(f"C√°maras funcionales encontradas: {successful_cameras}")
    return successful_cameras

def show_permission_instructions():
    """Mostrar instrucciones para otorgar permisos."""
    if platform.system() == "Darwin":
        print("=== INSTRUCCIONES PARA OTORGAR PERMISOS EN macOS ===")
        print()
        print("Si no se detectaron c√°maras funcionales:")
        print()
        print("1. Abrir 'Configuraci√≥n del Sistema' (System Settings)")
        print("2. Ir a 'Privacidad y Seguridad' (Privacy & Security)")
        print("3. Buscar 'C√°mara' en la lista de la izquierda")
        print("4. Habilitar el acceso para:")
        print("   - Terminal (si ejecutas desde terminal)")
        print("   - Python")
        print("   - Visual Studio Code (si ejecutas desde VS Code)")
        print()
        print("5. Reiniciar el terminal o aplicaci√≥n despu√©s de otorgar permisos")
        print("6. Ejecutar de nuevo este diagn√≥stico")
        print()
        print("Alternativamente, puedes ejecutar desde un terminal nuevo:")
        print("  sudo python3 src/main_tracking.py")
        print()

def main():
    """Funci√≥n principal del diagn√≥stico."""
    print("üîç DIAGN√ìSTICO DE C√ÅMARA Y PERMISOS")
    print("=" * 50)
    print()
    
    check_system_info()
    check_camera_permissions()
    
    cameras = test_camera_access()
    
    if cameras:
        print("‚úÖ DIAGN√ìSTICO EXITOSO")
        print(f"Se encontraron {len(cameras)} c√°mara(s) funcional(es)")
        print("Puedes ejecutar el sistema de tracking con:")
        print("  make run")
    else:
        print("‚ùå PROBLEMA DETECTADO")
        print("No se encontraron c√°maras funcionales")
        show_permission_instructions()

if __name__ == "__main__":
    main()
